#!/usr/bin/env ruby

require 'gli'
require 'decking'

module Decking::CLI
  @@logger = Log4r::Logger.new('decking::cli')
  extend GLI::App

  accept(Hash) do |value|
    result = {}
    value.split(/,/).each do |pair|
      k,v = pair.split(/=/)
      result[k] = v
    end
    result
  end

  sort_help :manually
  subcommand_option_handling :normal

  if File.file? Dir.pwd + '/.deckingrc-override'
    config_file Dir.pwd + '/.deckingrc-override'
  elsif File.file? Dir.pwd + '/.deckingrc'
    config_file Dir.pwd + '/.deckingrc'
  else
    config_file '.deckingrc'
  end

  program_desc "Manage a cluster of docker containers"
  version "Decking: #{Decking::VERSION}\n    Docker:  #{Docker.version["Version"]}"

  desc 'Path to decking.yaml'
  flag [:config], :default_value => File.expand_path(File.dirname(__FILE__)) + '/../spec/resources/decking-container-tests.yaml'

  desc 'The name of the cluster to use for all commands'
  flag [:cluster], :default_value => "unknown"

  desc 'Add or override environment variables on all containers in cluster'
  flag   [:e, :env], :type => Hash, :default_value => {}

  pre do |global_options,options,args|
    @@logger.debug "Using #{global_options[:config]} for decking config"
    Decking::Parser.config_file global_options[:config]
    Decking::Parser.parse global_options[:cluster]
    if !global_options[:env].nil?
      Decking::Parser.config.containers.each_key do |container|
        global_options[:env].each{|k, v| Decking::Parser.config.containers[container].env[k] = v}
      end
    end
    Decking::Parser.config.containers.map { |name, config| Decking::Container.add config }
  end

  desc 'Create and start the cluster'
  command :run do |c|
    c.switch [:f, :force], :default_value => false, :desc => 'Force the command in a destructive manner'
    c.action do |global_options,options,args|
      @@logger.info "Running cluster #{global_options[:cluster]}"
      unless options[:force]
        Decking::Container.create_all
      else
        Decking::Container.create_all!
      end
      Decking::Container.start_all
    end
  end

  desc 'Show the cluster logs'
  command [:logs,:attach] do |c|
    c.switch [:t,:timestamps], :default_value => false, :desc => 'Show Timestamps'
    c.switch [:f,:follow], :default_value => false, :desc => 'Tail the logs'
    c.flag [:n,:lines], :default_value => 100, :desc => 'Number of lines to print'
    c.action do |global_options,options,args|
      Decking::Container.tail_all_logs options[:timestamps], options[:lines], options[:follow]
    end
  end

  desc 'Completely remove the cluster containers'
  command [:rm] do |c|
    c.switch [:f, :force], :default_value => false, :desc => 'Force the Delete'
    c.action do |global_options,options,args|
      unless options[:force]
        Decking::Container.delete_all
      else
        Decking::Container.delete_all!
      end
    end
  end

  desc 'Stop the cluster'
  command [:stop] do |c|
    c.switch [:f, :force], :default_value => false, :desc => 'Force Stop the cluster'
    c.action do |global_options,options,args|
      unless options[:force]
        Decking::Container.stop_all
      else
        Decking::Container.stop_all!
      end
    end
  end

  desc 'Start the cluster'
  command [:start] do |c|
    c.action do |global_options,options,args|
      Decking::Container.start_all
    end
  end

  desc 'Only create the cluster'
  command [:create] do |c|
    c.switch [:f, :force], :default_value => false, :desc => 'Force create the cluster by removing any existing duplicates'
    c.action do |global_options,options,args|
      unless options[:force]
        Decking::Container.create_all
      else
        Decking::Container.create_all!
      end
    end
  end

  desc 'Print to STDOUT the compiled cluster configuration'
  command [:printcluster] do |c|
    c.action do |global_options,options,args|
      Decking::Parser.print
    end
  end

  desc 'Build Container(s)'
  command [:build] do |c|
  end

end

exit Decking::CLI.run(ARGV)
